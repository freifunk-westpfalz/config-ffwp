router id 10.198.2.1;

table ffwp; # BGP Peerings
table ibgp;
table icvpn; # BGP Peerings (ICVPN)
table freifunk; # Kernel table 42 (Routing from Freifunk networks)

function is_freifunk() {
    return ( (net ~ [10.0.0.0/8+]) && !(net ~ [10.8.0.0/14+]) );
}

function is_self_net() {
    return (net ~ [10.198.0.0/16+]);
}

function is_self() {
    return (proto = "static_ffwp");
}

filter ffwp_internal_export {
    if (proto = "local_ffwp") then accept;
    if (source != RTS_BGP && proto != "pipe_icvpn") then reject; 
    if (proto ~ "bgp_ibgp_*") then reject;
    if (is_self_net()) then reject;
    accept;
}


protocol pipe pipe_ffwp {
    peer table ffwp;
    import all;
    export none;
};

protocol pipe pipe_icvpn {
    table ffwp;
    peer table icvpn;
    export where is_self();
    import all;
    mode opaque;
};

protocol pipe pipe_freifunk {
    peer table freifunk;
    import none;
    export all;
};

protocol pipe pipe_ibgp {
    peer table ibgp;
    import all;
    export where !is_self_net();
    mode opaque;
};

protocol kernel kernel_master {
    scan time 20;
    import none;
    export filter {
        krt_prefsrc = 10.198.2.1;
        accept;
    };
};

protocol kernel kernel_freifunk {
    scan time 20;
    import none;
    export filter {
        krt_prefsrc = 10.198.2.1;
        accept;
    };
    table freifunk;
    device routes;
    kernel table 42;
};

# This pseudo-protocol watches all interface up/down events.
protocol device {
    scan time 10;       # Scan interfaces every 10 seconds
};

protocol static unreachable_default {
    table freifunk;
    route 0.0.0.0/0 reject;
};

protocol static static_ffwp {
    table ffwp;
    route 10.198.0.0/16 reject;
};

protocol static local_ffwp {
    table ffwp;
    route 10.198.0.0/18 via "br-ffwp";
};

template bgp bgp_ibgp {
    local as 65242;
    table ibgp;
    import filter {
        preference = 99;
        accept;
    };
    export all;
    gateway direct;
    next hop self;
};

template bgp bgp_icvpn {
    local as 65242;
    table icvpn;
    import where (is_freifunk() && !is_self_net());
    export all;
};

# iBGP (siehe IPv6; ggf. eigenen Eintrag entfernen, falls von anderem gateway Ã¼bernommen, bzw. neuen gateway )

#protocol bgp srv01 from bgp_ibgp {
#    neighbor 10.112.1.1 as 65112;
#};

